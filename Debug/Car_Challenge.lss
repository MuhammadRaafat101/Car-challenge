
Car_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001472  00001506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008a  0080008a  00001530  2**0
                  ALLOC
  3 .stab         00001494  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d2d  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 09 	call	0x133e	; 0x133e <main>
      8a:	0c 94 37 0a 	jmp	0x146e	; 0x146e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:

#include "DIO.h"


status	Dio_init(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Dio_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <Dio_init+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	status retval = OK;
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Index=0;
      a2:	19 82       	std	Y+1, r1	; 0x01

	if(NUM_OF_PINS < MAX_NUM_OF_PINS )
	{
		for(Index = 0; Index < NUM_OF_PINS;Index++ )
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	84 c5       	rjmp	.+2824   	; 0xbb0 <__stack+0x351>
		{
			Dio_arr[Index].Init = INITI;
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	28 2f       	mov	r18, r24
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	c9 01       	movw	r24, r18
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	82 0f       	add	r24, r18
      b6:	93 1f       	adc	r25, r19
      b8:	88 0f       	add	r24, r24
      ba:	99 1f       	adc	r25, r25
      bc:	fc 01       	movw	r30, r24
      be:	eb 59       	subi	r30, 0x9B	; 155
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	80 83       	st	Z, r24
			switch(Dio_arr[Index].Port)
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	28 2f       	mov	r18, r24
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	c9 01       	movw	r24, r18
      ce:	88 0f       	add	r24, r24
      d0:	99 1f       	adc	r25, r25
      d2:	82 0f       	add	r24, r18
      d4:	93 1f       	adc	r25, r19
      d6:	88 0f       	add	r24, r24
      d8:	99 1f       	adc	r25, r25
      da:	fc 01       	movw	r30, r24
      dc:	e0 5a       	subi	r30, 0xA0	; 160
      de:	ff 4f       	sbci	r31, 0xFF	; 255
      e0:	80 81       	ld	r24, Z
      e2:	28 2f       	mov	r18, r24
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	3c 83       	std	Y+4, r19	; 0x04
      e8:	2b 83       	std	Y+3, r18	; 0x03
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	9c 81       	ldd	r25, Y+4	; 0x04
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <Dio_init+0x64>
      f4:	70 c1       	rjmp	.+736    	; 0x3d6 <Dio_init+0x344>
      f6:	2b 81       	ldd	r18, Y+3	; 0x03
      f8:	3c 81       	ldd	r19, Y+4	; 0x04
      fa:	22 30       	cpi	r18, 0x02	; 2
      fc:	31 05       	cpc	r19, r1
      fe:	2c f4       	brge	.+10     	; 0x10a <Dio_init+0x78>
     100:	8b 81       	ldd	r24, Y+3	; 0x03
     102:	9c 81       	ldd	r25, Y+4	; 0x04
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	71 f0       	breq	.+28     	; 0x124 <Dio_init+0x92>
     108:	50 c5       	rjmp	.+2720   	; 0xbaa <__stack+0x34b>
     10a:	2b 81       	ldd	r18, Y+3	; 0x03
     10c:	3c 81       	ldd	r19, Y+4	; 0x04
     10e:	22 30       	cpi	r18, 0x02	; 2
     110:	31 05       	cpc	r19, r1
     112:	09 f4       	brne	.+2      	; 0x116 <Dio_init+0x84>
     114:	a9 c2       	rjmp	.+1362   	; 0x668 <Dio_init+0x5d6>
     116:	8b 81       	ldd	r24, Y+3	; 0x03
     118:	9c 81       	ldd	r25, Y+4	; 0x04
     11a:	83 30       	cpi	r24, 0x03	; 3
     11c:	91 05       	cpc	r25, r1
     11e:	09 f4       	brne	.+2      	; 0x122 <Dio_init+0x90>
     120:	ec c3       	rjmp	.+2008   	; 0x8fa <__stack+0x9b>
     122:	43 c5       	rjmp	.+2694   	; 0xbaa <__stack+0x34b>
			{
			case PORT_A :
				if(Dio_arr[Index].Dir == OUTPUT)
     124:	89 81       	ldd	r24, Y+1	; 0x01
     126:	28 2f       	mov	r18, r24
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	c9 01       	movw	r24, r18
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	82 0f       	add	r24, r18
     132:	93 1f       	adc	r25, r19
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	fc 01       	movw	r30, r24
     13c:	e0 5a       	subi	r30, 0xA0	; 160
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	80 81       	ld	r24, Z
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	09 f0       	breq	.+2      	; 0x148 <Dio_init+0xb6>
     146:	92 c0       	rjmp	.+292    	; 0x26c <Dio_init+0x1da>
				{
					DDRA_REG |= (1<<Dio_arr[Index].Pin);
     148:	aa e3       	ldi	r26, 0x3A	; 58
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ea e3       	ldi	r30, 0x3A	; 58
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	48 2f       	mov	r20, r24
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	c9 01       	movw	r24, r18
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	82 0f       	add	r24, r18
     162:	93 1f       	adc	r25, r19
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	fc 01       	movw	r30, r24
     16a:	ef 59       	subi	r30, 0x9F	; 159
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	80 81       	ld	r24, Z
     170:	28 2f       	mov	r18, r24
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_init+0xec>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	2a 95       	dec	r18
     180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_init+0xe8>
     182:	84 2b       	or	r24, r20
     184:	8c 93       	st	X, r24
					if (Dio_arr[Index].Out == HIGH)
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	28 2f       	mov	r18, r24
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	c9 01       	movw	r24, r18
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	82 0f       	add	r24, r18
     194:	93 1f       	adc	r25, r19
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	fc 01       	movw	r30, r24
     19c:	ed 59       	subi	r30, 0x9D	; 157
     19e:	ff 4f       	sbci	r31, 0xFF	; 255
     1a0:	80 81       	ld	r24, Z
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	09 f5       	brne	.+66     	; 0x1e8 <Dio_init+0x156>
					{
						PORTA_REG |=1<<Dio_arr[Index].Pin;
     1a6:	ab e3       	ldi	r26, 0x3B	; 59
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	eb e3       	ldi	r30, 0x3B	; 59
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	48 2f       	mov	r20, r24
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	28 2f       	mov	r18, r24
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	c9 01       	movw	r24, r18
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	82 0f       	add	r24, r18
     1c0:	93 1f       	adc	r25, r19
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	fc 01       	movw	r30, r24
     1c8:	ef 59       	subi	r30, 0x9F	; 159
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 81       	ld	r24, Z
     1ce:	28 2f       	mov	r18, r24
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	02 2e       	mov	r0, r18
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_init+0x14c>
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	0a 94       	dec	r0
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_init+0x148>
     1e2:	84 2b       	or	r24, r20
     1e4:	8c 93       	st	X, r24
     1e6:	e1 c4       	rjmp	.+2498   	; 0xbaa <__stack+0x34b>
					}
					else if(Dio_arr[Index].Out == LOW)
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	28 2f       	mov	r18, r24
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	c9 01       	movw	r24, r18
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	82 0f       	add	r24, r18
     1f6:	93 1f       	adc	r25, r19
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	fc 01       	movw	r30, r24
     1fe:	ed 59       	subi	r30, 0x9D	; 157
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	80 81       	ld	r24, Z
     204:	88 23       	and	r24, r24
     206:	11 f5       	brne	.+68     	; 0x24c <Dio_init+0x1ba>
					{
						PORTA_REG &=~(1<<Dio_arr[Index].Pin);
     208:	ab e3       	ldi	r26, 0x3B	; 59
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	eb e3       	ldi	r30, 0x3B	; 59
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	48 2f       	mov	r20, r24
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	c9 01       	movw	r24, r18
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	82 0f       	add	r24, r18
     222:	93 1f       	adc	r25, r19
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	fc 01       	movw	r30, r24
     22a:	ef 59       	subi	r30, 0x9F	; 159
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	80 81       	ld	r24, Z
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 2e       	mov	r0, r18
     23a:	02 c0       	rjmp	.+4      	; 0x240 <Dio_init+0x1ae>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	0a 94       	dec	r0
     242:	e2 f7       	brpl	.-8      	; 0x23c <Dio_init+0x1aa>
     244:	80 95       	com	r24
     246:	84 23       	and	r24, r20
     248:	8c 93       	st	X, r24
     24a:	af c4       	rjmp	.+2398   	; 0xbaa <__stack+0x34b>

					}
					else{
						Dio_arr[Index].Init = NOTINIT;
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	28 2f       	mov	r18, r24
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	c9 01       	movw	r24, r18
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	82 0f       	add	r24, r18
     25a:	93 1f       	adc	r25, r19
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	fc 01       	movw	r30, r24
     262:	eb 59       	subi	r30, 0x9B	; 155
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	10 82       	st	Z, r1
						retval =NOK;
     268:	1a 82       	std	Y+2, r1	; 0x02
     26a:	9f c4       	rjmp	.+2366   	; 0xbaa <__stack+0x34b>
					}
			}
			else if(Dio_arr[Index].Dir == INPUT)
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	c9 01       	movw	r24, r18
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	82 0f       	add	r24, r18
     27a:	93 1f       	adc	r25, r19
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	fc 01       	movw	r30, r24
     284:	e0 5a       	subi	r30, 0xA0	; 160
     286:	ff 4f       	sbci	r31, 0xFF	; 255
     288:	80 81       	ld	r24, Z
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	09 f0       	breq	.+2      	; 0x290 <Dio_init+0x1fe>
     28e:	93 c0       	rjmp	.+294    	; 0x3b6 <Dio_init+0x324>
				{
					DDRA_REG &= ~(1<<Dio_arr[Index].Pin);
     290:	aa e3       	ldi	r26, 0x3A	; 58
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	ea e3       	ldi	r30, 0x3A	; 58
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	48 2f       	mov	r20, r24
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	28 2f       	mov	r18, r24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	c9 01       	movw	r24, r18
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	fc 01       	movw	r30, r24
     2b2:	ef 59       	subi	r30, 0x9F	; 159
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	80 81       	ld	r24, Z
     2b8:	28 2f       	mov	r18, r24
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Dio_init+0x234>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	2a 95       	dec	r18
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Dio_init+0x230>
     2ca:	80 95       	com	r24
     2cc:	84 23       	and	r24, r20
     2ce:	8c 93       	st	X, r24
					if (Dio_arr[Index].Res == PULLUP)
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	c9 01       	movw	r24, r18
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	82 0f       	add	r24, r18
     2de:	93 1f       	adc	r25, r19
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	fc 01       	movw	r30, r24
     2e6:	ec 59       	subi	r30, 0x9C	; 156
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	80 81       	ld	r24, Z
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	09 f5       	brne	.+66     	; 0x332 <Dio_init+0x2a0>
					{
						PORTA_REG |=1<<Dio_arr[Index].Pin;
     2f0:	ab e3       	ldi	r26, 0x3B	; 59
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	eb e3       	ldi	r30, 0x3B	; 59
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	48 2f       	mov	r20, r24
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	28 2f       	mov	r18, r24
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	c9 01       	movw	r24, r18
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	fc 01       	movw	r30, r24
     312:	ef 59       	subi	r30, 0x9F	; 159
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	80 81       	ld	r24, Z
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 2e       	mov	r0, r18
     322:	02 c0       	rjmp	.+4      	; 0x328 <Dio_init+0x296>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <Dio_init+0x292>
     32c:	84 2b       	or	r24, r20
     32e:	8c 93       	st	X, r24
     330:	3c c4       	rjmp	.+2168   	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Res == EXTRES )
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	28 2f       	mov	r18, r24
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	c9 01       	movw	r24, r18
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	82 0f       	add	r24, r18
     340:	93 1f       	adc	r25, r19
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	fc 01       	movw	r30, r24
     348:	ec 59       	subi	r30, 0x9C	; 156
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	80 81       	ld	r24, Z
     34e:	88 23       	and	r24, r24
     350:	11 f5       	brne	.+68     	; 0x396 <Dio_init+0x304>
					{
						PORTA_REG &=~(1<<Dio_arr[Index].Pin);
     352:	ab e3       	ldi	r26, 0x3B	; 59
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	eb e3       	ldi	r30, 0x3B	; 59
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	48 2f       	mov	r20, r24
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	28 2f       	mov	r18, r24
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	c9 01       	movw	r24, r18
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	fc 01       	movw	r30, r24
     374:	ef 59       	subi	r30, 0x9F	; 159
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	80 81       	ld	r24, Z
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 2e       	mov	r0, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <Dio_init+0x2f8>
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	0a 94       	dec	r0
     38c:	e2 f7       	brpl	.-8      	; 0x386 <Dio_init+0x2f4>
     38e:	80 95       	com	r24
     390:	84 23       	and	r24, r20
     392:	8c 93       	st	X, r24
     394:	0a c4       	rjmp	.+2068   	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	c9 01       	movw	r24, r18
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	fc 01       	movw	r30, r24
     3ac:	eb 59       	subi	r30, 0x9B	; 155
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	10 82       	st	Z, r1
						retval =NOK;
     3b2:	1a 82       	std	Y+2, r1	; 0x02
     3b4:	fa c3       	rjmp	.+2036   	; 0xbaa <__stack+0x34b>

					}
				}else
				{
					Dio_arr[Index].Init = NOTINIT;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	28 2f       	mov	r18, r24
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	c9 01       	movw	r24, r18
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	82 0f       	add	r24, r18
     3c4:	93 1f       	adc	r25, r19
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	fc 01       	movw	r30, r24
     3cc:	eb 59       	subi	r30, 0x9B	; 155
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	10 82       	st	Z, r1
					retval =NOK;
     3d2:	1a 82       	std	Y+2, r1	; 0x02
     3d4:	ea c3       	rjmp	.+2004   	; 0xbaa <__stack+0x34b>
				}
				break;

			case PORT_B :
				if(Dio_arr[Index].Dir == OUTPUT)
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	c9 01       	movw	r24, r18
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	fc 01       	movw	r30, r24
     3ee:	e0 5a       	subi	r30, 0xA0	; 160
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	80 81       	ld	r24, Z
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <Dio_init+0x368>
     3f8:	92 c0       	rjmp	.+292    	; 0x51e <Dio_init+0x48c>
				{
					DDRB_REG |= (1<<Dio_arr[Index].Pin);
     3fa:	a7 e3       	ldi	r26, 0x37	; 55
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	e7 e3       	ldi	r30, 0x37	; 55
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	48 2f       	mov	r20, r24
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	c9 01       	movw	r24, r18
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	82 0f       	add	r24, r18
     414:	93 1f       	adc	r25, r19
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	fc 01       	movw	r30, r24
     41c:	ef 59       	subi	r30, 0x9F	; 159
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	80 81       	ld	r24, Z
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	02 c0       	rjmp	.+4      	; 0x430 <Dio_init+0x39e>
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	2a 95       	dec	r18
     432:	e2 f7       	brpl	.-8      	; 0x42c <Dio_init+0x39a>
     434:	84 2b       	or	r24, r20
     436:	8c 93       	st	X, r24
					if (Dio_arr[Index].Out == HIGH)
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	c9 01       	movw	r24, r18
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	82 0f       	add	r24, r18
     446:	93 1f       	adc	r25, r19
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	fc 01       	movw	r30, r24
     44e:	ed 59       	subi	r30, 0x9D	; 157
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	80 81       	ld	r24, Z
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	09 f5       	brne	.+66     	; 0x49a <Dio_init+0x408>
					{
						PORTB_REG |=1<<Dio_arr[Index].Pin;
     458:	a8 e3       	ldi	r26, 0x38	; 56
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e8 e3       	ldi	r30, 0x38	; 56
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	48 2f       	mov	r20, r24
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	c9 01       	movw	r24, r18
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	fc 01       	movw	r30, r24
     47a:	ef 59       	subi	r30, 0x9F	; 159
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	80 81       	ld	r24, Z
     480:	28 2f       	mov	r18, r24
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 2e       	mov	r0, r18
     48a:	02 c0       	rjmp	.+4      	; 0x490 <Dio_init+0x3fe>
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	0a 94       	dec	r0
     492:	e2 f7       	brpl	.-8      	; 0x48c <Dio_init+0x3fa>
     494:	84 2b       	or	r24, r20
     496:	8c 93       	st	X, r24
     498:	88 c3       	rjmp	.+1808   	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Pin== LOW)
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	c9 01       	movw	r24, r18
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	fc 01       	movw	r30, r24
     4b0:	ef 59       	subi	r30, 0x9F	; 159
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	80 81       	ld	r24, Z
     4b6:	88 23       	and	r24, r24
     4b8:	11 f5       	brne	.+68     	; 0x4fe <Dio_init+0x46c>
					{
						PORTB_REG &=~(1<<Dio_arr[Index].Pin);
     4ba:	a8 e3       	ldi	r26, 0x38	; 56
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e8 e3       	ldi	r30, 0x38	; 56
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	48 2f       	mov	r20, r24
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	c9 01       	movw	r24, r18
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	fc 01       	movw	r30, r24
     4dc:	ef 59       	subi	r30, 0x9F	; 159
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	80 81       	ld	r24, Z
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 2e       	mov	r0, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <Dio_init+0x460>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <Dio_init+0x45c>
     4f6:	80 95       	com	r24
     4f8:	84 23       	and	r24, r20
     4fa:	8c 93       	st	X, r24
     4fc:	56 c3       	rjmp	.+1708   	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	28 2f       	mov	r18, r24
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	c9 01       	movw	r24, r18
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	fc 01       	movw	r30, r24
     514:	eb 59       	subi	r30, 0x9B	; 155
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	10 82       	st	Z, r1
						retval =NOK;
     51a:	1a 82       	std	Y+2, r1	; 0x02
     51c:	46 c3       	rjmp	.+1676   	; 0xbaa <__stack+0x34b>

					}

				}else if(Dio_arr[Index].Dir == INPUT)
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	28 2f       	mov	r18, r24
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	c9 01       	movw	r24, r18
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	82 0f       	add	r24, r18
     52c:	93 1f       	adc	r25, r19
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	fc 01       	movw	r30, r24
     536:	e0 5a       	subi	r30, 0xA0	; 160
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	80 81       	ld	r24, Z
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	09 f0       	breq	.+2      	; 0x542 <Dio_init+0x4b0>
     540:	34 c3       	rjmp	.+1640   	; 0xbaa <__stack+0x34b>
				{
					DDRB_REG &= ~(1<<Dio_arr[Index].Pin);
     542:	a7 e3       	ldi	r26, 0x37	; 55
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e7 e3       	ldi	r30, 0x37	; 55
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	48 2f       	mov	r20, r24
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	28 2f       	mov	r18, r24
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	c9 01       	movw	r24, r18
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	82 0f       	add	r24, r18
     55c:	93 1f       	adc	r25, r19
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	fc 01       	movw	r30, r24
     564:	ef 59       	subi	r30, 0x9F	; 159
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	80 81       	ld	r24, Z
     56a:	28 2f       	mov	r18, r24
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <Dio_init+0x4e6>
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	2a 95       	dec	r18
     57a:	e2 f7       	brpl	.-8      	; 0x574 <Dio_init+0x4e2>
     57c:	80 95       	com	r24
     57e:	84 23       	and	r24, r20
     580:	8c 93       	st	X, r24
					if (Dio_arr[Index].Res == PULLUP)
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	28 2f       	mov	r18, r24
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	c9 01       	movw	r24, r18
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	fc 01       	movw	r30, r24
     598:	ec 59       	subi	r30, 0x9C	; 156
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	80 81       	ld	r24, Z
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	09 f5       	brne	.+66     	; 0x5e4 <Dio_init+0x552>
					{
						PORTB_REG |=1<<Dio_arr[Index].Pin;
     5a2:	a8 e3       	ldi	r26, 0x38	; 56
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	e8 e3       	ldi	r30, 0x38	; 56
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	48 2f       	mov	r20, r24
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	28 2f       	mov	r18, r24
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	c9 01       	movw	r24, r18
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	fc 01       	movw	r30, r24
     5c4:	ef 59       	subi	r30, 0x9F	; 159
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	80 81       	ld	r24, Z
     5ca:	28 2f       	mov	r18, r24
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	02 2e       	mov	r0, r18
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <Dio_init+0x548>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	0a 94       	dec	r0
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <Dio_init+0x544>
     5de:	84 2b       	or	r24, r20
     5e0:	8c 93       	st	X, r24
     5e2:	e3 c2       	rjmp	.+1478   	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Res == EXTRES )
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	c9 01       	movw	r24, r18
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	fc 01       	movw	r30, r24
     5fa:	ec 59       	subi	r30, 0x9C	; 156
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	80 81       	ld	r24, Z
     600:	88 23       	and	r24, r24
     602:	11 f5       	brne	.+68     	; 0x648 <Dio_init+0x5b6>
					{
						PORTB_REG &=~(1<<Dio_arr[Index].Pin);
     604:	a8 e3       	ldi	r26, 0x38	; 56
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e8 e3       	ldi	r30, 0x38	; 56
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	48 2f       	mov	r20, r24
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	c9 01       	movw	r24, r18
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	fc 01       	movw	r30, r24
     626:	ef 59       	subi	r30, 0x9F	; 159
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	80 81       	ld	r24, Z
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 2e       	mov	r0, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <Dio_init+0x5aa>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	0a 94       	dec	r0
     63e:	e2 f7       	brpl	.-8      	; 0x638 <Dio_init+0x5a6>
     640:	80 95       	com	r24
     642:	84 23       	and	r24, r20
     644:	8c 93       	st	X, r24
     646:	b1 c2       	rjmp	.+1378   	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	28 2f       	mov	r18, r24
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	c9 01       	movw	r24, r18
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	fc 01       	movw	r30, r24
     65e:	eb 59       	subi	r30, 0x9B	; 155
     660:	ff 4f       	sbci	r31, 0xFF	; 255
     662:	10 82       	st	Z, r1
						retval =NOK;
     664:	1a 82       	std	Y+2, r1	; 0x02
     666:	a1 c2       	rjmp	.+1346   	; 0xbaa <__stack+0x34b>

					}
				}
				break;
			case PORT_C :
				if(Dio_arr[Index].Dir == OUTPUT)
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	c9 01       	movw	r24, r18
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	fc 01       	movw	r30, r24
     680:	e0 5a       	subi	r30, 0xA0	; 160
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	80 81       	ld	r24, Z
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	09 f0       	breq	.+2      	; 0x68c <Dio_init+0x5fa>
     68a:	92 c0       	rjmp	.+292    	; 0x7b0 <Dio_init+0x71e>
				{
					DDRC_REG |= (1<<Dio_arr[Index].Pin);
     68c:	a4 e3       	ldi	r26, 0x34	; 52
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e4 e3       	ldi	r30, 0x34	; 52
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	48 2f       	mov	r20, r24
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	28 2f       	mov	r18, r24
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	c9 01       	movw	r24, r18
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	fc 01       	movw	r30, r24
     6ae:	ef 59       	subi	r30, 0x9F	; 159
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	80 81       	ld	r24, Z
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <Dio_init+0x630>
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	2a 95       	dec	r18
     6c4:	e2 f7       	brpl	.-8      	; 0x6be <Dio_init+0x62c>
     6c6:	84 2b       	or	r24, r20
     6c8:	8c 93       	st	X, r24
					if (Dio_arr[Index].Out == HIGH)
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	c9 01       	movw	r24, r18
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	fc 01       	movw	r30, r24
     6e0:	ed 59       	subi	r30, 0x9D	; 157
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 81       	ld	r24, Z
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	09 f5       	brne	.+66     	; 0x72c <Dio_init+0x69a>
					{
						PORTC_REG |=1<<Dio_arr[Index].Pin;
     6ea:	a5 e3       	ldi	r26, 0x35	; 53
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e5 e3       	ldi	r30, 0x35	; 53
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	48 2f       	mov	r20, r24
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	c9 01       	movw	r24, r18
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	82 0f       	add	r24, r18
     704:	93 1f       	adc	r25, r19
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	fc 01       	movw	r30, r24
     70c:	ef 59       	subi	r30, 0x9F	; 159
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	80 81       	ld	r24, Z
     712:	28 2f       	mov	r18, r24
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	02 2e       	mov	r0, r18
     71c:	02 c0       	rjmp	.+4      	; 0x722 <Dio_init+0x690>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	0a 94       	dec	r0
     724:	e2 f7       	brpl	.-8      	; 0x71e <Dio_init+0x68c>
     726:	84 2b       	or	r24, r20
     728:	8c 93       	st	X, r24
     72a:	3f c2       	rjmp	.+1150   	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Pin== LOW)
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	28 2f       	mov	r18, r24
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	c9 01       	movw	r24, r18
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	fc 01       	movw	r30, r24
     742:	ef 59       	subi	r30, 0x9F	; 159
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	80 81       	ld	r24, Z
     748:	88 23       	and	r24, r24
     74a:	11 f5       	brne	.+68     	; 0x790 <Dio_init+0x6fe>
					{
						PORTC_REG &=~(1<<Dio_arr[Index].Pin);
     74c:	a5 e3       	ldi	r26, 0x35	; 53
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	e5 e3       	ldi	r30, 0x35	; 53
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	48 2f       	mov	r20, r24
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	28 2f       	mov	r18, r24
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	c9 01       	movw	r24, r18
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	fc 01       	movw	r30, r24
     76e:	ef 59       	subi	r30, 0x9F	; 159
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	80 81       	ld	r24, Z
     774:	28 2f       	mov	r18, r24
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 2e       	mov	r0, r18
     77e:	02 c0       	rjmp	.+4      	; 0x784 <Dio_init+0x6f2>
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	0a 94       	dec	r0
     786:	e2 f7       	brpl	.-8      	; 0x780 <Dio_init+0x6ee>
     788:	80 95       	com	r24
     78a:	84 23       	and	r24, r20
     78c:	8c 93       	st	X, r24
     78e:	0d c2       	rjmp	.+1050   	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	28 2f       	mov	r18, r24
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	c9 01       	movw	r24, r18
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	82 0f       	add	r24, r18
     79e:	93 1f       	adc	r25, r19
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	fc 01       	movw	r30, r24
     7a6:	eb 59       	subi	r30, 0x9B	; 155
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	10 82       	st	Z, r1
						retval =NOK;
     7ac:	1a 82       	std	Y+2, r1	; 0x02
     7ae:	fd c1       	rjmp	.+1018   	; 0xbaa <__stack+0x34b>

					}

				}else if(Dio_arr[Index].Dir == INPUT)
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	c9 01       	movw	r24, r18
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	fc 01       	movw	r30, r24
     7c8:	e0 5a       	subi	r30, 0xA0	; 160
     7ca:	ff 4f       	sbci	r31, 0xFF	; 255
     7cc:	80 81       	ld	r24, Z
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <Dio_init+0x742>
     7d2:	eb c1       	rjmp	.+982    	; 0xbaa <__stack+0x34b>
				{
					DDRC_REG &= ~(1<<Dio_arr[Index].Pin);
     7d4:	a4 e3       	ldi	r26, 0x34	; 52
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	e4 e3       	ldi	r30, 0x34	; 52
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	48 2f       	mov	r20, r24
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	c9 01       	movw	r24, r18
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	82 0f       	add	r24, r18
     7ee:	93 1f       	adc	r25, r19
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	fc 01       	movw	r30, r24
     7f6:	ef 59       	subi	r30, 0x9F	; 159
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	80 81       	ld	r24, Z
     7fc:	28 2f       	mov	r18, r24
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	02 c0       	rjmp	.+4      	; 0x80a <Dio_init+0x778>
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	2a 95       	dec	r18
     80c:	e2 f7       	brpl	.-8      	; 0x806 <Dio_init+0x774>
     80e:	80 95       	com	r24
     810:	84 23       	and	r24, r20
     812:	8c 93       	st	X, r24
					if (Dio_arr[Index].Res == PULLUP)
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	c9 01       	movw	r24, r18
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	82 0f       	add	r24, r18
     822:	93 1f       	adc	r25, r19
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	fc 01       	movw	r30, r24
     82a:	ec 59       	subi	r30, 0x9C	; 156
     82c:	ff 4f       	sbci	r31, 0xFF	; 255
     82e:	80 81       	ld	r24, Z
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	09 f5       	brne	.+66     	; 0x876 <__stack+0x17>
					{
						PORTC_REG |=1<<Dio_arr[Index].Pin;
     834:	a5 e3       	ldi	r26, 0x35	; 53
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	e5 e3       	ldi	r30, 0x35	; 53
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	48 2f       	mov	r20, r24
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	28 2f       	mov	r18, r24
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	c9 01       	movw	r24, r18
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	fc 01       	movw	r30, r24
     856:	ef 59       	subi	r30, 0x9F	; 159
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	80 81       	ld	r24, Z
     85c:	28 2f       	mov	r18, r24
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	02 2e       	mov	r0, r18
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	0a 94       	dec	r0
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	84 2b       	or	r24, r20
     872:	8c 93       	st	X, r24
     874:	9a c1       	rjmp	.+820    	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Res == EXTRES )
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	c9 01       	movw	r24, r18
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	fc 01       	movw	r30, r24
     88c:	ec 59       	subi	r30, 0x9C	; 156
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	80 81       	ld	r24, Z
     892:	88 23       	and	r24, r24
     894:	11 f5       	brne	.+68     	; 0x8da <__stack+0x7b>
					{
						PORTC_REG &=~(1<<Dio_arr[Index].Pin);
     896:	a5 e3       	ldi	r26, 0x35	; 53
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e5 e3       	ldi	r30, 0x35	; 53
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	48 2f       	mov	r20, r24
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	28 2f       	mov	r18, r24
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	c9 01       	movw	r24, r18
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	fc 01       	movw	r30, r24
     8b8:	ef 59       	subi	r30, 0x9F	; 159
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	80 81       	ld	r24, Z
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	02 2e       	mov	r0, r18
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	80 95       	com	r24
     8d4:	84 23       	and	r24, r20
     8d6:	8c 93       	st	X, r24
     8d8:	68 c1       	rjmp	.+720    	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	c9 01       	movw	r24, r18
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	fc 01       	movw	r30, r24
     8f0:	eb 59       	subi	r30, 0x9B	; 155
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	10 82       	st	Z, r1
						retval =NOK;
     8f6:	1a 82       	std	Y+2, r1	; 0x02
     8f8:	58 c1       	rjmp	.+688    	; 0xbaa <__stack+0x34b>

					}
				}
				break;
			case PORT_D :
				if(Dio_arr[Index].Dir == OUTPUT)
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	28 2f       	mov	r18, r24
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	c9 01       	movw	r24, r18
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	82 0f       	add	r24, r18
     908:	93 1f       	adc	r25, r19
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	fc 01       	movw	r30, r24
     912:	e0 5a       	subi	r30, 0xA0	; 160
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	80 81       	ld	r24, Z
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0xbf>
     91c:	92 c0       	rjmp	.+292    	; 0xa42 <__stack+0x1e3>
				{
					DDRD_REG |= (1<<Dio_arr[Index].Pin);
     91e:	a1 e3       	ldi	r26, 0x31	; 49
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e1 e3       	ldi	r30, 0x31	; 49
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	48 2f       	mov	r20, r24
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	28 2f       	mov	r18, r24
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	c9 01       	movw	r24, r18
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	82 0f       	add	r24, r18
     938:	93 1f       	adc	r25, r19
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	fc 01       	movw	r30, r24
     940:	ef 59       	subi	r30, 0x9F	; 159
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	80 81       	ld	r24, Z
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0xf5>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	2a 95       	dec	r18
     956:	e2 f7       	brpl	.-8      	; 0x950 <__stack+0xf1>
     958:	84 2b       	or	r24, r20
     95a:	8c 93       	st	X, r24
					if (Dio_arr[Index].Out == HIGH)
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	c9 01       	movw	r24, r18
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	fc 01       	movw	r30, r24
     972:	ed 59       	subi	r30, 0x9D	; 157
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	80 81       	ld	r24, Z
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	09 f5       	brne	.+66     	; 0x9be <__stack+0x15f>
					{
						PORTD_REG |=1<<Dio_arr[Index].Pin;
     97c:	a2 e3       	ldi	r26, 0x32	; 50
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e2 e3       	ldi	r30, 0x32	; 50
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	48 2f       	mov	r20, r24
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	c9 01       	movw	r24, r18
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	82 0f       	add	r24, r18
     996:	93 1f       	adc	r25, r19
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	fc 01       	movw	r30, r24
     99e:	ef 59       	subi	r30, 0x9F	; 159
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	80 81       	ld	r24, Z
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 2e       	mov	r0, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0x155>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <__stack+0x151>
     9b8:	84 2b       	or	r24, r20
     9ba:	8c 93       	st	X, r24
     9bc:	f6 c0       	rjmp	.+492    	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Pin== LOW)
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	c9 01       	movw	r24, r18
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	fc 01       	movw	r30, r24
     9d4:	ef 59       	subi	r30, 0x9F	; 159
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	11 f5       	brne	.+68     	; 0xa22 <__stack+0x1c3>
					{
						PORTD_REG &=~(1<<Dio_arr[Index].Pin);
     9de:	a2 e3       	ldi	r26, 0x32	; 50
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e2 e3       	ldi	r30, 0x32	; 50
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	48 2f       	mov	r20, r24
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	c9 01       	movw	r24, r18
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	fc 01       	movw	r30, r24
     a00:	ef 59       	subi	r30, 0x9F	; 159
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	80 81       	ld	r24, Z
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 2e       	mov	r0, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x1b7>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <__stack+0x1b3>
     a1a:	80 95       	com	r24
     a1c:	84 23       	and	r24, r20
     a1e:	8c 93       	st	X, r24
     a20:	c4 c0       	rjmp	.+392    	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	28 2f       	mov	r18, r24
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	c9 01       	movw	r24, r18
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	fc 01       	movw	r30, r24
     a38:	eb 59       	subi	r30, 0x9B	; 155
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	10 82       	st	Z, r1
						retval =NOK;
     a3e:	1a 82       	std	Y+2, r1	; 0x02
     a40:	b4 c0       	rjmp	.+360    	; 0xbaa <__stack+0x34b>

					}

				}else if(Dio_arr[Index].Dir == INPUT)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	28 2f       	mov	r18, r24
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	c9 01       	movw	r24, r18
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	82 0f       	add	r24, r18
     a50:	93 1f       	adc	r25, r19
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	fc 01       	movw	r30, r24
     a5a:	e0 5a       	subi	r30, 0xA0	; 160
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	80 81       	ld	r24, Z
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <__stack+0x207>
     a64:	93 c0       	rjmp	.+294    	; 0xb8c <__stack+0x32d>
				{
					DDRD_REG &= ~(1<<Dio_arr[Index].Pin);
     a66:	a1 e3       	ldi	r26, 0x31	; 49
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e1 e3       	ldi	r30, 0x31	; 49
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	48 2f       	mov	r20, r24
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	28 2f       	mov	r18, r24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	c9 01       	movw	r24, r18
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	fc 01       	movw	r30, r24
     a88:	ef 59       	subi	r30, 0x9F	; 159
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	80 81       	ld	r24, Z
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x23d>
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	2a 95       	dec	r18
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <__stack+0x239>
     aa0:	80 95       	com	r24
     aa2:	84 23       	and	r24, r20
     aa4:	8c 93       	st	X, r24
					if (Dio_arr[Index].Res == PULLUP)
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	c9 01       	movw	r24, r18
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	fc 01       	movw	r30, r24
     abc:	ec 59       	subi	r30, 0x9C	; 156
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	80 81       	ld	r24, Z
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	09 f5       	brne	.+66     	; 0xb08 <__stack+0x2a9>
					{
						PORTD_REG |=1<<Dio_arr[Index].Pin;
     ac6:	a2 e3       	ldi	r26, 0x32	; 50
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e2 e3       	ldi	r30, 0x32	; 50
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	48 2f       	mov	r20, r24
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	28 2f       	mov	r18, r24
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	c9 01       	movw	r24, r18
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	fc 01       	movw	r30, r24
     ae8:	ef 59       	subi	r30, 0x9F	; 159
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	80 81       	ld	r24, Z
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__stack+0x29f>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <__stack+0x29b>
     b02:	84 2b       	or	r24, r20
     b04:	8c 93       	st	X, r24
     b06:	51 c0       	rjmp	.+162    	; 0xbaa <__stack+0x34b>

					}else if(Dio_arr[Index].Res == EXTRES )
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	c9 01       	movw	r24, r18
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	82 0f       	add	r24, r18
     b16:	93 1f       	adc	r25, r19
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	fc 01       	movw	r30, r24
     b1e:	ec 59       	subi	r30, 0x9C	; 156
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	80 81       	ld	r24, Z
     b24:	88 23       	and	r24, r24
     b26:	11 f5       	brne	.+68     	; 0xb6c <__stack+0x30d>
					{
						PORTD_REG &=~(1<<Dio_arr[Index].Pin);
     b28:	a2 e3       	ldi	r26, 0x32	; 50
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	e2 e3       	ldi	r30, 0x32	; 50
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	48 2f       	mov	r20, r24
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	c9 01       	movw	r24, r18
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	fc 01       	movw	r30, r24
     b4a:	ef 59       	subi	r30, 0x9F	; 159
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	80 81       	ld	r24, Z
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	02 2e       	mov	r0, r18
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <__stack+0x301>
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	0a 94       	dec	r0
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <__stack+0x2fd>
     b64:	80 95       	com	r24
     b66:	84 23       	and	r24, r20
     b68:	8c 93       	st	X, r24
     b6a:	1f c0       	rjmp	.+62     	; 0xbaa <__stack+0x34b>

					}else{

						Dio_arr[Index].Init = NOTINIT;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	c9 01       	movw	r24, r18
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	fc 01       	movw	r30, r24
     b82:	eb 59       	subi	r30, 0x9B	; 155
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
						retval =NOK;
     b88:	1a 82       	std	Y+2, r1	; 0x02
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <__stack+0x34b>

					}
				}else{
					Dio_arr[Index].Init = NOTINIT;
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	c9 01       	movw	r24, r18
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	fc 01       	movw	r30, r24
     ba2:	eb 59       	subi	r30, 0x9B	; 155
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	10 82       	st	Z, r1
					retval =NOK;
     ba8:	1a 82       	std	Y+2, r1	; 0x02
	status retval = OK;
	uint8 Index=0;

	if(NUM_OF_PINS < MAX_NUM_OF_PINS )
	{
		for(Index = 0; Index < NUM_OF_PINS;Index++ )
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <__stack+0x359>
     bb6:	78 ca       	rjmp	.-2832   	; 0xa8 <Dio_init+0x16>
			Dio_arr[Index].Init = NOTINIT;
		}
		retval=NOK;
	}

	return retval;
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02

}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <Dio_read>:
status	Dio_read(uint8 Port,uint8 Pin,uint8 * val)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <Dio_read+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <Dio_read+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	8a 83       	std	Y+2, r24	; 0x02
     bd8:	6b 83       	std	Y+3, r22	; 0x03
     bda:	5d 83       	std	Y+5, r21	; 0x05
     bdc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Status;

	return Status;
     bde:	89 81       	ldd	r24, Y+1	; 0x01

}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <Dio_write>:
status	Dio_write(uint8 Port,uint8 Pin,uint8 val)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	27 97       	sbiw	r28, 0x07	; 7
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	6c 83       	std	Y+4, r22	; 0x04
     c08:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Status= OK;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Index =0;
     c0e:	19 82       	std	Y+1, r1	; 0x01

	for(Index = 0 ; Index<NUM_OF_PINS;Index++)
     c10:	19 82       	std	Y+1, r1	; 0x01
     c12:	37 c1       	rjmp	.+622    	; 0xe82 <Dio_write+0x292>
	{
		if( Dio_arr[Index].Port==Port && Dio_arr[Index].Pin==Pin)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	c9 01       	movw	r24, r18
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	fc 01       	movw	r30, r24
     c2a:	e0 5a       	subi	r30, 0xA0	; 160
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	90 81       	ld	r25, Z
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	98 17       	cp	r25, r24
     c34:	09 f0       	breq	.+2      	; 0xc38 <Dio_write+0x48>
     c36:	21 c1       	rjmp	.+578    	; 0xe7a <Dio_write+0x28a>
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	c9 01       	movw	r24, r18
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	82 0f       	add	r24, r18
     c46:	93 1f       	adc	r25, r19
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	fc 01       	movw	r30, r24
     c4e:	ef 59       	subi	r30, 0x9F	; 159
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	90 81       	ld	r25, Z
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	98 17       	cp	r25, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <Dio_write+0x6c>
     c5a:	0f c1       	rjmp	.+542    	; 0xe7a <Dio_write+0x28a>
		{

			if((Dio_arr[Index].Init==INITI) && (Dio_arr[Index].Dir == OUTPUT) &&(val == HIGH || val==LOW) )
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	c9 01       	movw	r24, r18
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	fc 01       	movw	r30, r24
     c72:	eb 59       	subi	r30, 0x9B	; 155
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	80 81       	ld	r24, Z
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <Dio_write+0x8e>
     c7c:	fc c0       	rjmp	.+504    	; 0xe76 <Dio_write+0x286>
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	c9 01       	movw	r24, r18
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	82 0f       	add	r24, r18
     c8c:	93 1f       	adc	r25, r19
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	fc 01       	movw	r30, r24
     c96:	e0 5a       	subi	r30, 0xA0	; 160
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	09 f0       	breq	.+2      	; 0xca2 <Dio_write+0xb2>
     ca0:	ea c0       	rjmp	.+468    	; 0xe76 <Dio_write+0x286>
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <Dio_write+0xc0>
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	88 23       	and	r24, r24
     cac:	09 f0       	breq	.+2      	; 0xcb0 <Dio_write+0xc0>
     cae:	e3 c0       	rjmp	.+454    	; 0xe76 <Dio_write+0x286>
			{
				switch(Port)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3f 83       	std	Y+7, r19	; 0x07
     cb8:	2e 83       	std	Y+6, r18	; 0x06
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Dio_write+0xd6>
     cc4:	47 c0       	rjmp	.+142    	; 0xd54 <Dio_write+0x164>
     cc6:	2e 81       	ldd	r18, Y+6	; 0x06
     cc8:	3f 81       	ldd	r19, Y+7	; 0x07
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <Dio_write+0xea>
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	71 f0       	breq	.+28     	; 0xcf4 <Dio_write+0x104>
     cd8:	cb c0       	rjmp	.+406    	; 0xe70 <Dio_write+0x280>
     cda:	2e 81       	ldd	r18, Y+6	; 0x06
     cdc:	3f 81       	ldd	r19, Y+7	; 0x07
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <Dio_write+0xf6>
     ce4:	67 c0       	rjmp	.+206    	; 0xdb4 <Dio_write+0x1c4>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <Dio_write+0x102>
     cf0:	91 c0       	rjmp	.+290    	; 0xe14 <Dio_write+0x224>
     cf2:	be c0       	rjmp	.+380    	; 0xe70 <Dio_write+0x280>
				{
				case PORT_A :

					if(val == HIGH)
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <Dio_write+0x132>
					{
						PORTA_REG |= (1 <<Pin);
     cfa:	ab e3       	ldi	r26, 0x3B	; 59
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e3       	ldi	r30, 0x3B	; 59
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <Dio_write+0x128>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <Dio_write+0x124>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	a7 c0       	rjmp	.+334    	; 0xe70 <Dio_write+0x280>

					}else if(val == LOW)
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	88 23       	and	r24, r24
     d26:	09 f0       	breq	.+2      	; 0xd2a <Dio_write+0x13a>
     d28:	a3 c0       	rjmp	.+326    	; 0xe70 <Dio_write+0x280>
					{
						PORTA_REG &= ~( 1 <<Pin);
     d2a:	ab e3       	ldi	r26, 0x3B	; 59
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	eb e3       	ldi	r30, 0x3B	; 59
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <Dio_write+0x158>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <Dio_write+0x154>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	8e c0       	rjmp	.+284    	; 0xe70 <Dio_write+0x280>
					}
					break;
				case PORT_B :
					if(val == HIGH)
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <Dio_write+0x192>
					{
						PORTB_REG |= (1 <<Pin);
     d5a:	a8 e3       	ldi	r26, 0x38	; 56
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e8 e3       	ldi	r30, 0x38	; 56
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <Dio_write+0x188>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <Dio_write+0x184>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	77 c0       	rjmp	.+238    	; 0xe70 <Dio_write+0x280>

					}else if(val == LOW)
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	88 23       	and	r24, r24
     d86:	09 f0       	breq	.+2      	; 0xd8a <Dio_write+0x19a>
     d88:	73 c0       	rjmp	.+230    	; 0xe70 <Dio_write+0x280>
					{
						PORTB_REG &= ~( 1 <<Pin);
     d8a:	a8 e3       	ldi	r26, 0x38	; 56
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e8 e3       	ldi	r30, 0x38	; 56
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <Dio_write+0x1b8>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <Dio_write+0x1b4>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	5e c0       	rjmp	.+188    	; 0xe70 <Dio_write+0x280>
					}
					break;

				case PORT_C :

					if(val == HIGH)
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	a1 f4       	brne	.+40     	; 0xde2 <Dio_write+0x1f2>
					{
						PORTC_REG |= (1 <<Pin);
     dba:	a5 e3       	ldi	r26, 0x35	; 53
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e3       	ldi	r30, 0x35	; 53
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <Dio_write+0x1e8>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <Dio_write+0x1e4>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	47 c0       	rjmp	.+142    	; 0xe70 <Dio_write+0x280>

					}else if(val == LOW)
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	88 23       	and	r24, r24
     de6:	09 f0       	breq	.+2      	; 0xdea <Dio_write+0x1fa>
     de8:	43 c0       	rjmp	.+134    	; 0xe70 <Dio_write+0x280>
					{
						PORTC_REG &= ~( 1 <<Pin);
     dea:	a5 e3       	ldi	r26, 0x35	; 53
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e3       	ldi	r30, 0x35	; 53
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Dio_write+0x218>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <Dio_write+0x214>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	2e c0       	rjmp	.+92     	; 0xe70 <Dio_write+0x280>
					}
					break;

				case PORT_D :

					if(val == HIGH)
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <Dio_write+0x252>
					{
						PORTD_REG |= (1 <<Pin);
     e1a:	a2 e3       	ldi	r26, 0x32	; 50
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <Dio_write+0x248>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <Dio_write+0x244>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	17 c0       	rjmp	.+46     	; 0xe70 <Dio_write+0x280>

					}else if(val == LOW)
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	88 23       	and	r24, r24
     e46:	a1 f4       	brne	.+40     	; 0xe70 <Dio_write+0x280>
					{
						PORTD_REG &= ~( 1 <<Pin);
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <Dio_write+0x276>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <Dio_write+0x272>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
					}
					break;
				}
				Index = NUM_OF_PINS +1;
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	0a c0       	rjmp	.+20     	; 0xe8a <Dio_write+0x29a>
				break;
			}else{
				Status = NOK;
     e76:	1a 82       	std	Y+2, r1	; 0x02
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <Dio_write+0x28c>
			}
		}else {
			Status = NOK;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
status	Dio_write(uint8 Port,uint8 Pin,uint8 val)
{
	uint8 Status= OK;
	uint8 Index =0;

	for(Index = 0 ; Index<NUM_OF_PINS;Index++)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f4       	brcc	.+2      	; 0xe8a <Dio_write+0x29a>
     e88:	c5 ce       	rjmp	.-630    	; 0xc14 <Dio_write+0x24>
			}
		}else {
			Status = NOK;
		}
	}
	return Status;
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <SegmentDisplay>:


#include "Seven_Seg.h"

void SegmentDisplay(uint8 Digit)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <SegmentDisplay+0x6>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
	switch (Digit) {
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3b 83       	std	Y+3, r19	; 0x03
     eb4:	2a 83       	std	Y+2, r18	; 0x02
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <SegmentDisplay+0x24>
     ec0:	9b c0       	rjmp	.+310    	; 0xff8 <SegmentDisplay+0x15a>
     ec2:	2a 81       	ldd	r18, Y+2	; 0x02
     ec4:	3b 81       	ldd	r19, Y+3	; 0x03
     ec6:	25 30       	cpi	r18, 0x05	; 5
     ec8:	31 05       	cpc	r19, r1
     eca:	ec f4       	brge	.+58     	; 0xf06 <SegmentDisplay+0x68>
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <SegmentDisplay+0x3a>
     ed6:	51 c0       	rjmp	.+162    	; 0xf7a <SegmentDisplay+0xdc>
     ed8:	2a 81       	ldd	r18, Y+2	; 0x02
     eda:	3b 81       	ldd	r19, Y+3	; 0x03
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	2c f4       	brge	.+10     	; 0xeec <SegmentDisplay+0x4e>
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	99 f1       	breq	.+102    	; 0xf50 <SegmentDisplay+0xb2>
     eea:	03 c1       	rjmp	.+518    	; 0x10f2 <SegmentDisplay+0x254>
     eec:	2a 81       	ldd	r18, Y+2	; 0x02
     eee:	3b 81       	ldd	r19, Y+3	; 0x03
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <SegmentDisplay+0x5a>
     ef6:	56 c0       	rjmp	.+172    	; 0xfa4 <SegmentDisplay+0x106>
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	9b 81       	ldd	r25, Y+3	; 0x03
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <SegmentDisplay+0x66>
     f02:	65 c0       	rjmp	.+202    	; 0xfce <SegmentDisplay+0x130>
     f04:	f6 c0       	rjmp	.+492    	; 0x10f2 <SegmentDisplay+0x254>
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	3b 81       	ldd	r19, Y+3	; 0x03
     f0a:	27 30       	cpi	r18, 0x07	; 7
     f0c:	31 05       	cpc	r19, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <SegmentDisplay+0x74>
     f10:	b2 c0       	rjmp	.+356    	; 0x1076 <SegmentDisplay+0x1d8>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	91 05       	cpc	r25, r1
     f1a:	6c f4       	brge	.+26     	; 0xf36 <SegmentDisplay+0x98>
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	3b 81       	ldd	r19, Y+3	; 0x03
     f20:	25 30       	cpi	r18, 0x05	; 5
     f22:	31 05       	cpc	r19, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <SegmentDisplay+0x8a>
     f26:	7d c0       	rjmp	.+250    	; 0x1022 <SegmentDisplay+0x184>
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	86 30       	cpi	r24, 0x06	; 6
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <SegmentDisplay+0x96>
     f32:	8c c0       	rjmp	.+280    	; 0x104c <SegmentDisplay+0x1ae>
     f34:	de c0       	rjmp	.+444    	; 0x10f2 <SegmentDisplay+0x254>
     f36:	2a 81       	ldd	r18, Y+2	; 0x02
     f38:	3b 81       	ldd	r19, Y+3	; 0x03
     f3a:	28 30       	cpi	r18, 0x08	; 8
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <SegmentDisplay+0xa4>
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <SegmentDisplay+0x202>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	89 30       	cpi	r24, 0x09	; 9
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <SegmentDisplay+0xb0>
     f4c:	be c0       	rjmp	.+380    	; 0x10ca <SegmentDisplay+0x22c>
     f4e:	d1 c0       	rjmp	.+418    	; 0x10f2 <SegmentDisplay+0x254>
		case 0 :
			Dio_write(PORT_A,PIN0,LOW);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	63 e0       	ldi	r22, 0x03	; 3
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
     f78:	bc c0       	rjmp	.+376    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 1 :
			Dio_write(PORT_A,PIN0,HIGH);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
     fa2:	a7 c0       	rjmp	.+334    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 2 :
			Dio_write(PORT_A,PIN0,LOW);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,HIGH);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	62 e0       	ldi	r22, 0x02	; 2
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	63 e0       	ldi	r22, 0x03	; 3
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
     fcc:	92 c0       	rjmp	.+292    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 3 :
			Dio_write(PORT_A,PIN0,HIGH);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,HIGH);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	63 e0       	ldi	r22, 0x03	; 3
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
     ff6:	7d c0       	rjmp	.+250    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 4 :
			Dio_write(PORT_A,PIN0,LOW);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,HIGH);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	63 e0       	ldi	r22, 0x03	; 3
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
    1020:	68 c0       	rjmp	.+208    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 5 :
			Dio_write(PORT_A,PIN0,HIGH);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,HIGH);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
    104a:	53 c0       	rjmp	.+166    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 6 :
			Dio_write(PORT_A,PIN0,LOW);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,HIGH);
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,HIGH);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	63 e0       	ldi	r22, 0x03	; 3
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
    1074:	3e c0       	rjmp	.+124    	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 7 :
			Dio_write(PORT_A,PIN0,HIGH);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,HIGH);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,HIGH);
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	62 e0       	ldi	r22, 0x02	; 2
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,LOW);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	63 e0       	ldi	r22, 0x03	; 3
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 8 :
			Dio_write(PORT_A,PIN0,LOW);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	62 e0       	ldi	r22, 0x02	; 2
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,HIGH);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	63 e0       	ldi	r22, 0x03	; 3
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <SegmentDisplay+0x254>

			break;
		case 9 :
			Dio_write(PORT_A,PIN0,HIGH);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN1,LOW);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN2,LOW);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	62 e0       	ldi	r22, 0x02	; 2
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			Dio_write(PORT_A,PIN3,HIGH);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	63 e0       	ldi	r22, 0x03	; 3
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Dio_write>
			break;

		default:
			break;
	}
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <Timer_Init>:
 */

#include "TIMER.h"

status Timer_Init()
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <Timer_Init+0x6>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <Timer_Init+0x8>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	uint8 Status =0;
    110a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Index = 0;
    110c:	19 82       	std	Y+1, r1	; 0x01
	for(Index = 0; Index < NUM_OF_TIMERS;Index++)
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	0a c1       	rjmp	.+532    	; 0x1326 <Timer_Init+0x228>
	{
		Timer_arr[Index].Init=OK;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	c9 01       	movw	r24, r18
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	fc 01       	movw	r30, r24
    1128:	e3 58       	subi	r30, 0x83	; 131
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 83       	st	Z, r24
		switch(Timer_arr[Index].Timer)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	c9 01       	movw	r24, r18
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	fc 01       	movw	r30, r24
    1146:	e8 58       	subi	r30, 0x88	; 136
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3c 83       	std	Y+4, r19	; 0x04
    1152:	2b 83       	std	Y+3, r18	; 0x03
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <Timer_Init+0x62>
    115e:	e0 c0       	rjmp	.+448    	; 0x1320 <Timer_Init+0x222>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <Timer_Init+0x6e>
    116a:	70 c0       	rjmp	.+224    	; 0x124c <Timer_Init+0x14e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	09 f0       	breq	.+2      	; 0x1176 <Timer_Init+0x78>
    1174:	d5 c0       	rjmp	.+426    	; 0x1320 <Timer_Init+0x222>
		{
		case TIMER_0 :
			if(Timer_arr[Index].Mode == NORMAL)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	c9 01       	movw	r24, r18
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	fc 01       	movw	r30, r24
    118c:	e7 58       	subi	r30, 0x87	; 135
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <Timer_Init+0x9a>
    1196:	c4 c0       	rjmp	.+392    	; 0x1320 <Timer_Init+0x222>
			{
				if(Timer_arr[Index].Prescaler >  CLK_FALING )
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	c9 01       	movw	r24, r18
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	e8 58       	subi	r30, 0x88	; 136
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	80 81       	ld	r24, Z
    11b6:	88 30       	cpi	r24, 0x08	; 8
    11b8:	10 f0       	brcs	.+4      	; 0x11be <Timer_Init+0xc0>
				{
					Status =NOK;
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <Timer_Init+0xec>
				}else
				{
					TCCR0 |= Timer_arr[Index].Prescaler ;
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	40 81       	ld	r20, Z
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	c9 01       	movw	r24, r18
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	fc 01       	movw	r30, r24
    11e0:	e8 58       	subi	r30, 0x88	; 136
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24

				}

				TCNT0 = Timer_arr[Index].CounterLoad;
    11ea:	a2 e5       	ldi	r26, 0x52	; 82
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	c9 01       	movw	r24, r18
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	fc 01       	movw	r30, r24
    1204:	e4 58       	subi	r30, 0x84	; 132
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	8c 93       	st	X, r24
				if(Timer_arr[Index].ISR == ISR_EN)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	c9 01       	movw	r24, r18
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	fc 01       	movw	r30, r24
    1222:	e5 58       	subi	r30, 0x85	; 133
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	41 f4       	brne	.+16     	; 0x123c <Timer_Init+0x13e>
				{
					TIMSK |= 1<<TOIE0; // Interrupt when overflow
    122c:	a9 e5       	ldi	r26, 0x59	; 89
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e9 e5       	ldi	r30, 0x59	; 89
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	81 60       	ori	r24, 0x01	; 1
    1238:	8c 93       	st	X, r24
    123a:	72 c0       	rjmp	.+228    	; 0x1320 <Timer_Init+0x222>
				}else
				{
					TIMSK &= ~(1<<TOIE0);
    123c:	a9 e5       	ldi	r26, 0x59	; 89
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e9 e5       	ldi	r30, 0x59	; 89
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	8c 93       	st	X, r24
    124a:	6a c0       	rjmp	.+212    	; 0x1320 <Timer_Init+0x222>

			break;
		case TIMER_1 :
			break;
		case TIMER_2 :
			if(Timer_arr[Index].Mode == NORMAL)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	c9 01       	movw	r24, r18
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	82 0f       	add	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	fc 01       	movw	r30, r24
    1262:	e7 58       	subi	r30, 0x87	; 135
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <Timer_Init+0x170>
    126c:	59 c0       	rjmp	.+178    	; 0x1320 <Timer_Init+0x222>
			{
				if(Timer_arr[Index].Prescaler < CLK_FALING )
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	c9 01       	movw	r24, r18
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	fc 01       	movw	r30, r24
    1286:	e8 58       	subi	r30, 0x88	; 136
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	87 30       	cpi	r24, 0x07	; 7
    128e:	b8 f4       	brcc	.+46     	; 0x12be <Timer_Init+0x1c0>
				{
					TCCR2 |= Timer_arr[Index].Prescaler ;
    1290:	a5 e4       	ldi	r26, 0x45	; 69
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e5 e4       	ldi	r30, 0x45	; 69
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	40 81       	ld	r20, Z
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	c9 01       	movw	r24, r18
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	82 0f       	add	r24, r18
    12a8:	93 1f       	adc	r25, r19
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	fc 01       	movw	r30, r24
    12b2:	e8 58       	subi	r30, 0x88	; 136
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <Timer_Init+0x1c2>
				}else
				{
					Status =NOK;
    12be:	1a 82       	std	Y+2, r1	; 0x02
				}

				TCNT2 = Timer_arr[Index].CounterLoad;
    12c0:	a4 e4       	ldi	r26, 0x44	; 68
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	82 0f       	add	r24, r18
    12d2:	93 1f       	adc	r25, r19
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	fc 01       	movw	r30, r24
    12da:	e4 58       	subi	r30, 0x84	; 132
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 81       	ld	r24, Z
    12e0:	8c 93       	st	X, r24
				if(Timer_arr[Index].ISR == ISR_EN)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	c9 01       	movw	r24, r18
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	fc 01       	movw	r30, r24
    12f8:	e5 58       	subi	r30, 0x85	; 133
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	41 f4       	brne	.+16     	; 0x1312 <Timer_Init+0x214>
				{
					TIMSK |= 1<<TOIE2; // Interrupt when overflow
    1302:	a9 e5       	ldi	r26, 0x59	; 89
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e9 e5       	ldi	r30, 0x59	; 89
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 64       	ori	r24, 0x40	; 64
    130e:	8c 93       	st	X, r24
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <Timer_Init+0x222>
				}else
				{
					TIMSK &= ~(1<<TOIE2);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7b       	andi	r24, 0xBF	; 191
    131e:	8c 93       	st	X, r24

status Timer_Init()
{
	uint8 Status =0;
	uint8 Index = 0;
	for(Index = 0; Index < NUM_OF_TIMERS;Index++)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	08 f4       	brcc	.+2      	; 0x132e <Timer_Init+0x230>
    132c:	f2 ce       	rjmp	.-540    	; 0x1112 <Timer_Init+0x14>
			break;
		}


	}
	return Status;
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <main>:


void delay(uint32 x);
uint8 Digit= 0;
int main()
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62

	//uint32 index =0;
	Dio_init();
    1346:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Timer_Init();
    134a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <Timer_Init>
	//sei();
while(1)
{
	SegmentDisplay(Digit);
    134e:	80 91 8a 00 	lds	r24, 0x008A
    1352:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SegmentDisplay>
	delay(1);
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 b2 09 	call	0x1364	; 0x1364 <delay>
    1362:	f5 cf       	rjmp	.-22     	; 0x134e <main+0x10>

00001364 <delay>:
}
/*just for polling */


void delay(uint32 x)
{ x *=15;
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <delay+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <delay+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	6a 83       	std	Y+2, r22	; 0x02
    1374:	7b 83       	std	Y+3, r23	; 0x03
    1376:	8c 83       	std	Y+4, r24	; 0x04
    1378:	9d 83       	std	Y+5, r25	; 0x05
    137a:	2a 81       	ldd	r18, Y+2	; 0x02
    137c:	3b 81       	ldd	r19, Y+3	; 0x03
    137e:	4c 81       	ldd	r20, Y+4	; 0x04
    1380:	5d 81       	ldd	r21, Y+5	; 0x05
    1382:	da 01       	movw	r26, r20
    1384:	c9 01       	movw	r24, r18
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	aa 1f       	adc	r26, r26
    1394:	bb 1f       	adc	r27, r27
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	aa 1f       	adc	r26, r26
    139c:	bb 1f       	adc	r27, r27
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	aa 1f       	adc	r26, r26
    13a4:	bb 1f       	adc	r27, r27
    13a6:	82 1b       	sub	r24, r18
    13a8:	93 0b       	sbc	r25, r19
    13aa:	a4 0b       	sbc	r26, r20
    13ac:	b5 0b       	sbc	r27, r21
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	9b 83       	std	Y+3, r25	; 0x03
    13b2:	ac 83       	std	Y+4, r26	; 0x04
    13b4:	bd 83       	std	Y+5, r27	; 0x05
	for(uint8 y=0;y<x;y++)
    13b6:	19 82       	std	Y+1, r1	; 0x01
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <delay+0x7c>
	{
		while((TIFR & (1<<TOV0))==0);
    13ba:	e8 e5       	ldi	r30, 0x58	; 88
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	b9 f3       	breq	.-18     	; 0x13ba <delay+0x56>
		TIFR |= (1 << TOV0); // clear the overflow
    13cc:	a8 e5       	ldi	r26, 0x58	; 88
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e8 e5       	ldi	r30, 0x58	; 88
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
/*just for polling */


void delay(uint32 x)
{ x *=15;
	for(uint8 y=0;y<x;y++)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	ac 81       	ldd	r26, Y+4	; 0x04
    13f0:	bd 81       	ldd	r27, Y+5	; 0x05
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	4a 07       	cpc	r20, r26
    13f8:	5b 07       	cpc	r21, r27
    13fa:	f8 f2       	brcs	.-66     	; 0x13ba <delay+0x56>
	{
		while((TIFR & (1<<TOV0))==0);
		TIFR |= (1 << TOV0); // clear the overflow
	}
	Digit++;
    13fc:	80 91 8a 00 	lds	r24, 0x008A
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	80 93 8a 00 	sts	0x008A, r24
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	8f 93       	push	r24
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	TIFR |= (1 << TOIE2);
    1432:	a8 e5       	ldi	r26, 0x58	; 88
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e8 e5       	ldi	r30, 0x58	; 88
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 64       	ori	r24, 0x40	; 64
    143e:	8c 93       	st	X, r24
	if(Digit == 10) Digit = 0;
    1440:	80 91 8a 00 	lds	r24, 0x008A
    1444:	8a 30       	cpi	r24, 0x0A	; 10
    1446:	11 f4       	brne	.+4      	; 0x144c <__vector_11+0x36>
    1448:	10 92 8a 00 	sts	0x008A, r1
	Digit++;
    144c:	80 91 8a 00 	lds	r24, 0x008A
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 8a 00 	sts	0x008A, r24
}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	8f 91       	pop	r24
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <_exit>:
    146e:	f8 94       	cli

00001470 <__stop_program>:
    1470:	ff cf       	rjmp	.-2      	; 0x1470 <__stop_program>
